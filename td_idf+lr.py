# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FKuTH5gCGiebtxAMHtlGG35XN_oDEJuU
"""

import pandas as pd
import numpy as np
import re

# Optional: NLTK for stemming
import nltk
nltk.download('punkt')
from nltk.stem import PorterStemmer

# Sklearn modules
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import classification_report, f1_score, accuracy_score

# Load and preprocess data
df = pd.read_csv('train.csv')
label_cols = ["toxic", "severe_toxic", "obscene", "threat", "insult", "identity_hate"]
df.dropna(subset=["comment_text"], inplace=True)

# Text cleaning and preprocessing
stemmer = PorterStemmer()
use_stemming = True

def clean_text(text):
    try:
        if not isinstance(text, str) or text.strip() == "":
            return ""

        text = text.lower()
        text = re.sub(r'[^a-z\s]', '', text)
        tokens = text.split()

        if use_stemming:
            tokens = [stemmer.stem(token) for token in tokens if token.isalpha() and len(token) < 30]

        return ' '.join(tokens)
    except Exception as e:
        print(f"Error processing: {text[:30]}... -> {e}")
        return ""

df['clean_text'] = df['comment_text'].apply(clean_text)


X_train, X_test, y_train, y_test = train_test_split(
    df['clean_text'], df[label_cols], test_size=0.2, random_state=42
)

# TF-IDF Vectorization
vectorizer = TfidfVectorizer(max_features=10000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train Logistic Regression for multi-label
model = MultiOutputClassifier(LogisticRegression(max_iter=1000))
model.fit(X_train_tfidf, y_train)

# Predict and Evaluate
y_pred = model.predict(X_test_tfidf)
print("\n--- Evaluation Metrics ---")
print("F1 Score (macro):", f1_score(y_test, y_pred, average='macro'))
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred, target_names=label_cols))